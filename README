DGG: Datatype Generic Generator v0.1-dev

./Main [OPTIONS]

Common flags:
  -a --adapter=ITEM   Adapter name. E.g.: EMGM
  -i --input=ITEM     Input file
  -d --datatype=ITEM  Specify datatype for which to derive. Generates for all
                      datatypes if left blank.
  -o --output=ITEM    Output file. E.g.: Instances.hs
  -? --help           Display help message
  -V --version        Print version information


The library currently only supports generating code for regular datatypes for EMGM. This code still lacks a couple of representations and plenty of bugs are still left. The usual disclaimers for prerelease software apply.


Usage:

There are two ways to use DGG: using the commandline or using Template Haskell. Both ways and their pros and cons are discussed in this section.

Commandline:
Using the commandline you can specify a file and have DGG generate generic code for all (currently) supported datatypes in that file. If no output file is specified, the generated code will be outputted to stdout, otherwise to the file specified.
Using the adapter argument you can specify the generic programming library you wish to generate code for. Currently only EMGM is supported.
The advantage of using the CLI tool is that it works regardless of your compiler. In addition, the generated code can easily be inspected and possibly debugged. The downside to this approach is that you manually need to generate and regenerate the code on updates.

Template Haskell:
Using TH to generate your generic representations is significantly more convenient than the CLI approach. Just specify the adapter function and the datatype you wish to use in the TH call: 

$(derive deriveEMGM ''Foo)

where Foo is the datastructure for which the EMGM representations will be generated.
The advantage of this approach is that your generic representations will be regenerated on every compile. In addition, it is easier to specify which datatypes should have generic representations and which should not.
The downside to this approach is that it is limited to the GHC compiler. In addition, the generated code can only be viewed using flags like -ddump-slices.

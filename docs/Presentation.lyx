#LyX 2.0.0beta3 created this file. For more info see http://www.lyx.org/
\lyxformat 410
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usetheme{uucs}
\usepackage{lhs2tex}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 1
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
DGG: Your One-Stop Shop for Generic Representations
\end_layout

\begin_layout Author
JurriÃ«n Stutterheim
\end_layout

\begin_layout Date
January 24, 2011
\end_layout

\begin_layout BeginFrame
Overview
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Section
DGG: Your One-Stop Shop for Generic Representations
\end_layout

\begin_layout Subsection
Introduction to Datatype-Generic Programming
\end_layout

\begin_layout BeginFrame
Nota Bene
\end_layout

\begin_layout Itemize
The following slides give a very short introduction to generic programming
 for the purpose of setting a context for this presentation
\end_layout

\begin_layout Itemize
This introduction is incomplete and does not aim to provide you with a full
 understanding of generic programming
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Datatype Generic Programming
\end_layout

\begin_layout Itemize
Datatype generic programming allows functions to be defined once for a wide
 range of different data types
\end_layout

\begin_layout Itemize
Functions are programmed over the structure of a data type, rather than
 the data types themselves
\end_layout

\begin_layout Itemize
No more countless numbers of class instances
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Sum of Products
\end_layout

\begin_layout Standard
Regular datatype:
\end_layout

\begin_layout Standard
\begin_inset External
	template LHS
	filename list.lhs

\end_inset


\end_layout

\begin_layout Standard
Sum of products view:
\end_layout

\begin_layout Standard
\begin_inset space \qquad{}
\end_inset


\begin_inset Formula $\mathbf{1}+(a\times List\, a)$
\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
EMGM embedding-projection pair
\end_layout

\begin_layout Standard
Converting from and to generic representations is done using an embedding-projec
tion pair (EP).
\end_layout

\begin_layout Standard
\begin_inset External
	template LHS
	filename list-emgm.lhs

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Generic representations
\end_layout

\begin_layout Itemize
A lot of the generic representation code is highly regular and can be automatica
lly generated
\end_layout

\begin_layout Itemize
Most generic programming libraries do so using Template Haskell
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Subsection
Introducing DGG
\end_layout

\begin_layout BeginFrame
The problem
\end_layout

\begin_layout Itemize
Individual DGP libraries often have similar functionality for gathering
 information about data types
\end_layout

\begin_layout Itemize
Problems with Template Haskell
\end_layout

\begin_deeper
\begin_layout Itemize
Changes frequently with new GHC releases
\end_layout

\begin_deeper
\begin_layout Itemize
DGP libraries need to be updated to the new API
\end_layout

\begin_layout Itemize
Hard to maintain BC with older versions
\end_layout

\end_deeper
\begin_layout Itemize
Debugging TH code is hard: 
\family typewriter
-ddump-splices
\end_layout

\begin_layout Itemize
TH is only available on GHC
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
The solution
\end_layout

\begin_layout Itemize
Parse data types to a custom DSL which individual DGP libraries can use
 to generate code, reducing duplicate work
\end_layout

\begin_layout Itemize
Abstract from Template Haskell
\end_layout

\begin_deeper
\begin_layout Itemize
Using 
\family typewriter
haskell-src-exts
\family default
 and the DSL
\end_layout

\begin_layout Itemize
Derive supports using TH with 
\family typewriter
haskell-src-exts
\end_layout

\begin_layout Itemize
Offers a more stable API to DGP library developers
\end_layout

\end_deeper
\begin_layout Itemize
Offer a command line tool
\end_layout

\begin_deeper
\begin_layout Itemize
Output generated code to file or stdout
\end_layout

\begin_layout Itemize
Easy for debugging when developing a DGP library
\end_layout

\begin_layout Itemize
Compiler independent
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Architecture
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename dgg.dot
	height 17em

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Subsection
Using DGG
\end_layout

\begin_layout BeginFrame
Current support
\end_layout

\begin_layout Itemize
Regular data types
\end_layout

\begin_layout Itemize
EMGM's embedding-project pair and (very) limited support for 
\family typewriter
Rep
\family default
, 
\family typewriter
FRep
\family default
 etc.
\end_layout

\begin_layout Itemize
SYB 
\family typewriter
Data
\family default
 and 
\family typewriter
Typeable
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Template Haskell usage
\end_layout

\begin_layout Standard
The 
\family typewriter
derive
\family default
 function is from the Derive library
\end_layout

\begin_layout Standard
The 
\family typewriter
deriveEMGM
\family default
 function is from DGG
\end_layout

\begin_layout Standard
\begin_inset External
	template LHS
	filename th.lhs

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
CLI usage
\end_layout

\begin_layout Standard
Parse all datatypes in 
\family typewriter
DataTypes.hs
\family default
 and generate code for SYB, output code to stdout
\end_layout

\begin_layout LyX-Code
dgg -i 
\begin_inset Quotes eld
\end_inset

DataTpes.hs
\begin_inset Quotes erd
\end_inset

 -a 
\begin_inset Quotes eld
\end_inset

SYB
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Parse all datatypes in 
\family typewriter
DataTypes.hs
\family default
 and generate code for EMGM, write code to 
\family typewriter
Reps.hs
\end_layout

\begin_layout LyX-Code
dgg -i 
\begin_inset Quotes eld
\end_inset


\family typewriter
DataTypes
\family default
.hs
\begin_inset Quotes erd
\end_inset

 -a 
\begin_inset Quotes eld
\end_inset

EMGM
\begin_inset Quotes erd
\end_inset

 -o 
\begin_inset Quotes eld
\end_inset

Reps.hs
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Subsection
Extending DGG
\end_layout

\begin_layout BeginFrame
Extending DGG
\end_layout

\begin_layout Itemize
DGG is easily extended to support new DGP libraries
\end_layout

\begin_layout Itemize
Each adapter module exports four functions:
\end_layout

\begin_layout Standard
\begin_inset External
	template LHS
	filename adapterInterface.lhs

\end_inset


\end_layout

\begin_layout Standard
Where 
\begin_inset Formula $*$
\end_inset

 is replaced by the name of the DGP library
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
DGG DSL
\end_layout

\begin_layout Standard
DGP library specific code is generated from these data types
\end_layout

\begin_layout Standard
\begin_inset External
	template LHS
	filename data-tcvc.lhs

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
CLI tool
\end_layout

\begin_layout Itemize
After writing the adapter, only the 
\family typewriter
Main.hs
\family default
 file needs to be modified.
\end_layout

\begin_layout Itemize
The following line is added to make the library selectable via the 
\family typewriter
-a
\family default
 flag:
\end_layout

\begin_layout Standard
\begin_inset External
	template LHS
	filename adaptersEntry.lhs

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Subsection
Developing DGG
\end_layout

\begin_layout BeginFrame
Developing DGG
\end_layout

\begin_layout Itemize
Designing an architecture with good separation of concerns and making the
 library easily extendible
\end_layout

\begin_layout Itemize
Determining what data to keep in parsing data types and how to store it
\end_layout

\begin_layout Itemize
Deciding on how to determine support for certain data types
\end_layout

\begin_deeper
\begin_layout Itemize
Based on 
\shape italic
Comparing Libraries for Generic Programming in Haskell
\shape default
 by Rodriguez et al.
\end_layout

\end_deeper
\begin_layout Itemize
Reverse-engineering generic code generation for EMGM and SYB
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Subsection
Wrapping up
\end_layout

\begin_layout BeginFrame
Future work
\end_layout

\begin_layout Itemize
Truly detect whether data types are supported by the DGP library
\end_layout

\begin_layout Itemize
Code generation up to standards of the existing TH solutions
\end_layout

\begin_layout Itemize
Add support for GADTs and type synonyms
\end_layout

\begin_layout Itemize
Improved kind analysis
\end_layout

\begin_layout Itemize
Infix operators and associativity information
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Conclusion
\end_layout

\begin_layout Itemize
Reduces the amount of duplicate work for DGP library developers
\end_layout

\begin_layout Itemize
Abstracts from Template Haskell
\end_layout

\begin_layout Itemize
Offers CLI utility
\end_layout

\begin_deeper
\begin_layout Itemize
Improved adapter debugging
\end_layout

\begin_layout Itemize
Compiler independent
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout Subsection
Questions?
\end_layout

\end_body
\end_document

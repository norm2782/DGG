%% This BibTeX bibliography file in UTF-8 format was created using Papers.
%% http://mekentosj.com/papers/

@article{Swierstra:2010p394,
author = {Doaitse Swierstra}, 
title = {A1-QuickStart},
pages = {1--161},
year = {2010},
month = {Aug},
date-added = {2010-09-05 19:36:45 +0200},
date-modified = {2010-09-05 19:37:27 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/Swierstra/2010%20Swierstra.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p394},
read = {Yes},
rating = {0}
}

@article{Swierstra:2010p407,
author = {Doaitse Swierstra}, 
title = {A5-memo-slides-english},
pages = {1--92},
year = {2010},
month = {Aug},
date-added = {2010-09-05 19:36:45 +0200},
date-modified = {2010-09-05 19:38:08 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/Swierstra/2010%20Swierstra-4.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p407},
read = {Yes},
rating = {0}
}

@article{Dijkstra:2007p590,
author = {Atze Dijkstra and Jeroen Fokker and S Doaitse Swierstra}, 
title = {The Structure of the Essential Haskell Compiler, or Coping with Compiler Complexity},
year = {2007},
date-added = {2010-11-12 15:56:16 +0100},
date-modified = {2010-11-12 15:56:40 +0100},
URL = {http://www.cs.uu.nl/wiki/bin/viewfile/Ehc/TheStructureOfTheEssentialHaskellCompiler?rev=1.1;filename=20070828-ifl07-ehcstruct.pdf},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2007/Dijkstra/2007%20Dijkstra.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p590},
rating = {0}
}

@article{Loh:2010p400,
author = {Andres L{\"o}h}, 
title = {C02-Data-Structures},
pages = {1--69},
year = {2010},
month = {Aug},
date-added = {2010-09-05 19:36:46 +0200},
date-modified = {2010-09-05 19:39:54 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/L%C3%B6h/2010%20L%C3%B6h-13.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p400},
read = {Yes},
rating = {0}
}

@article{Hinze:2006p600,
author = {Ralf Hinze and Andres L{\"o}h and Bruno C d S Oliveira}, 
title = {``Scrap Your Boilerplate'' Reloaded},
abstract = {Thepaper``Scrapyourboilerplate''(SYB)introducesacom- binator library for generic programming that offers generic traversals and queries. Classically, support for generic programming consists of two es- sential ingredients: a way to write (type-)overloaded functions, and in- dependently, a way to access the structure of data types. SYB seems to lack the second. As a consequence, it is difficult to compare with other approaches such as PolyP or Generic Haskell. In this paper we reveal the structural view that SYB builds upon. This allows us to define the combinators as generic functions in the classical sense. We explain the SYB approach in this changed setting from ground up, and use the un- derstanding gained to relate it to other generic programming approaches. Furthermore, we show that the SYB view is applicable to a very large class of data types, including generalized algebraic data types.},
year = {2006},
date-added = {2010-11-28 11:15:39 +0100},
date-modified = {2010-11-28 11:16:47 +0100},
URL = {http://web.archive.org/web/20080425140904/people.cs.uu.nl/andres/SYB0.pdf},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2006/Hinze/2006%20Hinze.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p600},
rating = {0}
}

@article{Magalhaes:2010p553,
author = {Jos{\'e} Pedro Magalhaes}, 
title = {Libraries for Generic Programming in Haskell - Scrap Your Boilerplate (SYB)},
affiliation = {Utrecht University},
year = {2010},
date-added = {2010-09-21 17:00:33 +0200},
date-modified = {2010-10-03 15:12:39 +0200},
URL = {http://www.cs.uu.nl/wiki/pub/GP/CourseSchedule/SYB.pdf},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/Magalhaes/2010%20Magalhaes.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p553},
rating = {0}
}

@article{aweodey:2005p349,
author = {Steve Awodey}, 
title = {Category Theory},
affiliation = {Carnegie Mellon University},
pages = {1--314},
year = {2005},
month = {Aug},
language = {English},
date-added = {2010-08-10 16:36:09 +0200},
date-modified = {2010-08-10 16:39:58 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2005/Awodey/2005%20Awodey.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p349},
read = {Yes},
rating = {0}
}

@article{Loh:2010p405,
author = {Andres L{\"o}h}, 
title = {B5-Monad-Transformers},
pages = {1--38},
year = {2010},
month = {Aug},
date-added = {2010-09-05 19:36:45 +0200},
date-modified = {2010-09-05 19:39:16 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/L%C3%B6h/2010%20L%C3%B6h-11.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p405},
read = {Yes},
rating = {0}
}

@article{Jeuring:2010p550,
author = {Johan Jeuring}, 
title = {Datatypes and Kinds},
year = {2010},
date-added = {2010-09-18 19:42:11 +0200},
date-modified = {2010-09-21 10:34:18 +0200},
URL = {http://www.cs.uu.nl/wiki/pub/GP/CourseSchedule/DataTypesAndKinds.pdf},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/Jeuring/2010%20Jeuring-2.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p550},
rating = {0}
}

@article{Magalhaes:2011p567,
author = {Jos{\'e} Pedro Magalhaes and Atze Dijkstra and Johan Jeuring and Andres L{\"o}h}, 
title = {A Generic Deriving Mechanism for Haskell},
abstract = {Haskell's deriving mechanismsupports the automatic generation ofinstances for a number of functions. The Hask ell98 Report onlyspecies ho wto generate instances for the Eq , Ord , Enum , Bounded , Show ,and Read classes.The description of ho wto gen- erateinstances is l argelyinformal. The generation of instances imposesrestrictions on the shape of datatypes, depending on the particularclass to deri ve.As a consequence, the portability of in- stancesacross dif ferentcompilers is not guaranteed. We propose a ne wapproach to Hask ell's deriving mechanism, whichallo wsusers to specify ho wto deri vearbitrary class in- stancesusing s tandarddatatype-generic programming techniques. Genericfunctions, including the methods from six standard Hask ell 98deri vableclasses, can be specied entirely within Hask ell98 plusmulti-parameter type classes, making them lightweight and portable.W e can also e xpress Functor , Typeable ,and man yother derivableclasses with our technique. W e implem entedour deriving mechanismtogether with man yne wderi vableclasses in the Utrecht HaskellCompiler .},
affiliation = {Utrecht University},
date-added = {2010-10-26 19:34:36 +0200},
date-modified = {2010-10-26 19:34:36 +0200},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p567},
rating = {0}
}

@article{McBride:2008p594,
author = {Connor McBride and Ross Paterson}, 
journal = {Journal of Functional Programming},
title = {Applicative Programming with Effects},
abstract = {In this paper, we introduce Applicative functors---an abstract characterisation of an ap- plicative style of effectful programming, weaker than Monads and hence more widespread. Indeed, it is the ubiquity of this programming pattern that drew us to the abstraction. We retrace our steps in this paper, introducing the applicative pattern by diverse exam- ples, then abstracting it to define the Applicative type class and introducing a bracket notation which interprets the normal application syntax in the idiom of an Applicative functor. Further, we develop the properties of applicative functors and the generic opera- tions they support. We close by identifying the categorical structure of applicative functors and examining their relationship both with Monads and with Arrows.},
affiliation = {University of Nottingham, City University},
number = {1},
pages = {1--12},
volume = {18},
year = {2008},
month = {Nov},
date-added = {2010-11-15 15:54:27 +0100},
date-modified = {2010-11-15 15:58:59 +0100},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2008/McBride/Journal%20of%20Functional%20Programming%202008%20McBride.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p594},
rating = {0}
}

@article{Loh:2010p393,
author = {Andres L{\"o}h}, 
title = {C01-Correctness-and-Testing},
pages = {1--72},
year = {2010},
month = {Aug},
date-added = {2010-09-05 19:36:46 +0200},
date-modified = {2010-09-05 19:39:34 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/L%C3%B6h/2010%20L%C3%B6h-12.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p393},
read = {Yes},
rating = {0}
}

@article{vanSteenbergen:2011p556,
author = {Martijn van Steenbergen and Jos{\'e} Pedro Magalhaes and Johan Jeuring}, 
title = {Generic Selections of Subexpressions},
abstract = {Tools for computer languages need position information: compilers for providing better error messages, structure editors for mapping between structural and textual views, and debuggers for navigating through a term, for instance. Manually adding position information to an abstract syntax tree is tedious and requires pervasive changes: the original tree becomes verbose and every function operating on it needs to be adapted.In this paper, we describe how to automatically extend datatypes with position information using datatype-generic programming techniques. Furthermore, we show examples of how to use this position information: parsers that automatically construct trees an- notated with positions, catamorphisms that deal with failure by reporting error locations, and zippers that efficiently navigate an- notated trees. The generic programming technique we describe is applicable to a wide range of domains.},
affiliation = {Utrecht University},
date-added = {2010-10-03 19:04:01 +0200},
date-modified = {2010-10-03 19:05:21 +0200},
URL = {http://dreixel.net/research/pdf/gss_draft.pdf},
local-url = {file://localhost/Users/norm2782/Documents/Papers/Unknown/van%20Steenbergen/van%20Steenbergen.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p556},
rating = {0}
}

@article{Russo:2008p630,
author = {Alejandro Russo and Koen Claessen and John Hughes}, 
title = {A Library for Light-Weight Information-Flow Security in Haskell},
abstract = {Protecting confidentiality of data has become increasingly im- portant for computing systems. Information-flow techniques have been developed over the years to achieve that purpose, leading to special-purpose languages that guarantee information-flow secu- rity in programs. However, rather than producing a new language from scratch, information-flow security can also be provided as a library. This has been done previously in Haskell using the arrow framework. In this paper, we show that arrows are not necessary to design such libraries and that a less general notion, namely mon- ads, is sufficient to achieve the same goals. We present a monadic library to provide information-flow security for Haskell programs. The library introduces mechanisms to protect confidentiality of data for pure computations, that we then easily, and modularly, extend to include dealing with side-effects. We also present com- binators to dynamically enforce different declassification policies when release of information is required in a controlled manner. It is possible to enforce policies related to what, by whom, and when information is released or a combination of them. The well-known concept of monads together with the light-weight characteristic of our approach makes the library suitable to build applications where confidentiality of data is an issue.},
affiliation = {Chalmers University of Technology},
pages = {1--12},
year = {2008},
month = {Dec},
date-added = {2010-12-23 22:58:26 +0100},
date-modified = {2010-12-23 22:59:25 +0100},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2008/Russo/2008%20Russo.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p630},
rating = {0}
}

@article{McBride:2008p372,
author = {Conor McBride and Ross Paterson}, 
journal = {J. Functional Programming},
title = {Applicative Programming with Effects},
number = {1},
pages = {1--13},
volume = {18},
year = {2008},
date-added = {2010-08-31 17:14:50 +0200},
date-modified = {2010-08-31 17:16:59 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2008/McBride/J.%20Functional%20Programming%202008%20McBride.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p372},
rating = {0}
}

@article{Baars:2002p638,
author = {Arthur Baars and S Doaitse Swierstra}, 
title = {Typing Dynamic Typing},
abstract = {Even when programming in a statically typed language we every now and then encounter statically untypable values; such values re- sult from interpreting values or from communicating with the out- side world. To cope with this problem most languages include some form of dynamic types. It may be that the core language has been explicitly extended with such a type, or that one is allowed to live dangerously by using functions like unsafeCoerce. We show how, by a careful use of existentially and universally quantified types, one may achieve the same effect, without extending the language with new or unsafe features. The techniques explained are univer- sally applicable, provided the core language is expressive enough; this is the case for the common implementations of Haskell. The techniques are used in the description of a type checking compiler that, starting from an expression term, constructs a typed function representing the semantics of that expression. In this function the overhead associated with the type checking is only once being paid for; in this sense we have thus achieved static type checking.},
affiliation = {Utrecht University},
pages = {1--10},
year = {2002},
month = {Aug},
date-added = {2011-01-12 14:09:37 +0100},
date-modified = {2011-01-12 14:10:22 +0100},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2002/Baars/2002%20Baars.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p638},
read = {Yes},
rating = {0}
}

@article{Jeuring:2009p411,
author = {Johan Jeuring and Sean Leather and Jos{\'e} Pedro Magalhaes and Alexey Rodriguez Yakushev}, 
title = {Libraries for Generic Programming in Haskell},
abstract = {These lecture notes introduce libraries for datatype-generic programming in Haskell. We introduce three characteristic generic programming libraries: lightweight implementation of generics and dynamics, extensible and modular generics for the masses, and scrap your boilerplate. We show how to use them to use and write generic programs. In the case studies for the different libraries we introduce generic components of a medium-sized application which assists a student in solving mathematical exercises.},
affiliation = {Utrecht University},
year = {2009},
language = {English},
date-added = {2010-09-12 15:43:13 +0200},
date-modified = {2010-09-13 11:42:26 +0200},
URL = {http://www.cs.uu.nl/wiki/pub/GP/CourseLiterature/libintro.pdf},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2009/Jeuring/2009%20Jeuring.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p411},
read = {Yes},
rating = {0}
}

@article{Swierstra:2010p408,
author = {Doaitse Swierstra}, 
title = {A3-IO},
pages = {1--63},
year = {2010},
month = {Aug},
date-added = {2010-09-05 19:36:45 +0200},
date-modified = {2010-09-05 19:37:51 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/Swierstra/2010%20Swierstra-2.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p408},
read = {Yes},
rating = {0}
}

@article{Munkby:2011p566,
author = {Gustav Munkby and Andreas Priesnitz and Sibylle Schupp and Marcin Zalewski}, 
title = {Scrap Your Boilerplate in C++},
abstract = {ScrapY o urBo ilerplate( SYB )i sa wel lst udiedand w idelyu sed designpat ternf org enerict raversali nt he Haskell language,b ut almostunkno wnt ogener icp rogrammersi n C ++ .T hisp apersho ws that SYB canbe i mplementedi n C ++ .I ti dentiest hef eatures andi diomso f C ++ thatcor respondt ot he Haskell constructsth at implement SYB ,o rcan be used t oemul atet hem,and p rovidesa prototype C ++ implementation.},
date-added = {2010-10-26 19:34:36 +0200},
date-modified = {2010-10-26 19:34:36 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/Unknown/Munkby/Munkby.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p566},
rating = {0}
}

@article{Munkby:2006p563,
author = {Gustav Munkby and Andreas Priesnitz and Sibylle Schupp and Marcin Zalewski}, 
journal = {Proceedings of the 2006 ACM SIGPLAN workshop on Generic programming},
title = {Scrap++: Scrap Your Boilerplate in C++},
abstract = {``Scrap Your Boilerplate'' (SYB) is a well studied and widely used design pattern for generic traversal in the Haskell language, but almost unknown to generic programmers in C++. This paper shows that SYB can be implemented in C++. It identifies the features and idioms of C++ that correspond to the Haskell constructs that implement SYB, or can be used to emulate them, and provides a prototype C++ implementation.},
affiliation = {Chalmers University of Technology},
pages = {66--75},
year = {2006},
month = {Aug},
date-added = {2010-10-25 11:39:35 +0200},
date-modified = {2010-10-25 11:43:07 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2006/Munkby/Proceedings%20of%20the%202006%20ACM%20SIGPLAN%20workshop%20on%20Generic%20programming%202006%20Munkby.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p563},
rating = {0}
}

@article{Loh:2010p399,
author = {Andres L{\"o}h}, 
title = {C08-Networking-and-Concurrency},
pages = {1--29},
year = {2010},
month = {Aug},
date-added = {2010-09-05 19:36:46 +0200},
date-modified = {2010-09-05 19:41:26 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/L%C3%B6h/2010%20L%C3%B6h-18.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p399},
read = {Yes},
rating = {0}
}

@article{Loh:2010p396,
author = {Andres L{\"o}h}, 
title = {B3-Kinds-Type-Inference-Classes},
pages = {1--80},
year = {2010},
month = {Aug},
date-added = {2010-09-05 19:36:45 +0200},
date-modified = {2010-09-05 19:38:29 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/L%C3%B6h/2010%20L%C3%B6h-9.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p396},
read = {Yes},
rating = {0}
}

@article{Jeuring:2010p549,
author = {Johan Jeuring}, 
title = {Libraries for Generic Programmingin Haskell - A Lightweight Implementation of Generics and Dynamics},
year = {2010},
date-added = {2010-09-18 19:28:18 +0200},
date-modified = {2010-10-03 15:12:53 +0200},
URL = {http://www.cs.uu.nl/wiki/pub/GP/CourseSchedule/LIGD.pdf},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/Jeuring/2010%20Jeuring-1.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p549},
read = {Yes},
rating = {0}
}

@article{Panitz:2005p561,
author = {Eric Sven Panitz}, 
title = {The Scrap Your Boilerplate Pattern in Java},
pages = {1--15},
year = {2005},
language = {English},
date-added = {2010-10-24 20:16:03 +0200},
date-modified = {2010-10-24 20:17:06 +0200},
URL = {http://www.cs.hs-rm.de/~panitz/paper/boilerplate/skript.pdf},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2005/Panitz/2005%20Panitz.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p561},
rating = {0}
}

@article{Yorgey:2009p370,
author = {Brent Yorgey}, 
journal = {The Monad.Reader},
title = {The Typeclassopedia},
abstract = {The standard Haskell libraries feature a number of type classes with algebraic or category-theoretic underpinnings. Becoming a fluent Haskell hacker requires inti- mate familiarity with them all, yet acquiring this familiarity often involves combing through a mountain of tutorials, blog posts, mailing list archives, and IRC logs.The goal of this article is to serve as a starting point for the student of Haskell wishing to gain a firm grasp of its standard type classes. The essentials of each type class are introduced, with examples, commentary, and extensive references for further reading.},
number = {13},
pages = {17--68},
year = {2009},
language = {English},
date-added = {2010-08-30 10:25:26 +0200},
date-modified = {2010-08-30 10:30:01 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2009/Yorgey/The%20Monad.Reader%202009%20Yorgey.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p370},
read = {Yes},
rating = {0}
}

@article{Hinze:2006p601,
author = {Ralf Hinze and Andres L{\"o}h}, 
title = {``Scrap Your Boilerplate'' Revolutions},
abstract = {Generic programming allows you to write a function once, and use it many times at different types. Traditionally, generic functions are defined by induction on the structure of types. ``Scrap your boil- erplate'' (SYB) is a radically different approach that dispatches on the structure of values. In previous work, we have shown how to reconcile both approaches using the concept of generic views: many generic func- tions can be based either on the classical sum-of-products view or on the view that underlies SYB, the so-called `spine' view. One distinct advan- tage of the spine view is its generality: it is applicable to a large class of data types, including generalised algebraic data types. Its main weakness roots in the value-orientation: one can only define generic functions that consume data (show) but not ones that produce data (read). Further- more, functions that abstract over type constructors (map, reduce) are out of reach. In this paper, we show how to overcome both limitations. The main technical contributions are the `type spine' view and the `lifted spine' view.},
year = {2006},
date-added = {2010-11-28 11:17:25 +0100},
date-modified = {2010-11-28 11:17:47 +0100},
URL = {http://people.cs.uu.nl/andres/SYB1.pdf},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2006/Hinze/2006%20Hinze-1.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p601},
rating = {0}
}

@article{Dijkstra:2009p587,
author = {Atze Dijkstra and Jeroen Fokker and S Doaitse Swierstra}, 
title = {The Architecture of the Utrecht Haskell Compiler},
abstract = {In this paper we describe the architecture of the Utrecht Haskell Compiler (UHC). UHC is a new Haskell compiler, that supports most (but not all) Haskell 98 features, plus some experimental ex- tensions. It targets multiple backends, including a bytecode inter- preter backend and a whole-program analysis backend, both via C. The implementation is rigorously organized as stepwise trans- formations through some explicit intermediate languages. The tree walks of all transformations are expressed as an algebra, with the aid of an Attribute Grammar based preprocessor. The compiler is just one materialization of a framework that supports experimen- tation with language variants, thanks to an aspect-oriented internal organization.},
affiliation = {Utrecht University},
pages = {1--12},
year = {2009},
language = {English},
date-added = {2010-11-11 08:51:38 +0100},
date-modified = {2010-11-11 08:52:36 +0100},
URL = {http://www.cs.uu.nl/wiki/pub/Ehc/TheArchitectureOfTheUtrechtHaskellCompiler/20090611-hs09-uhcarch.pdf},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2009/Dijkstra/2009%20Dijkstra.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p587},
read = {Yes},
rating = {0}
}

@article{Swierstra:2010p403,
author = {Doaitse Swierstra}, 
title = {C07-Parser-Combinators-Permutations},
pages = {1--49},
year = {2010},
month = {Aug},
date-added = {2010-09-05 19:36:46 +0200},
date-modified = {2010-09-05 19:41:16 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/Swierstra/2010%20Swierstra-6.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p403},
read = {Yes},
rating = {0}
}

@article{Mitchell:2010p564,
author = {Neil Mitchell}, 
title = {Rethinking supercompilation},
pages = {309--320},
year = {2010},
month = {Jul},
date-added = {2010-10-26 19:33:23 +0200},
date-modified = {2010-10-26 19:33:55 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/Mitchell/2010%20Mitchell.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p564},
rating = {0}
}

@article{Loh:2010p392,
author = {Andres L{\"o}h}, 
title = {C04-Good-Practices},
pages = {1--47},
year = {2010},
month = {Aug},
date-added = {2010-09-05 19:36:46 +0200},
date-modified = {2010-09-05 19:40:25 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/L%C3%B6h/2010%20L%C3%B6h-16.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p392},
read = {Yes},
rating = {0}
}

@article{Magalhaes:2011p568,
author = {Jos{\'e} Pedro Magalhaes and Stefan Holdermans and Johan Jeuring and Andres L{\"o}h}, 
title = {Optimizing Generics Is Easy!},
affiliation = {Utrecht University },
date-added = {2010-10-26 19:34:36 +0200},
date-modified = {2010-10-26 19:34:36 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/Unknown/Magalhaes/Magalhaes-1.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p568},
read = {Yes},
rating = {0}
}

@article{Harris:2005p625,
author = {Tim Harris and Simon Marlow and Simon Peyton Jones and Maurice Herlihy}, 
title = {Composable Memory Transactions},
abstract = {Writing concurrent programs is notoriously difficult, and is of increasing practical importance. A particular source of concern is that even correctly-implemented concurrency abstractions cannot be composed together to form larger abstractions. In this paper we present a new concurrency model, based on transactional memory, that offers far richer composition. All the usual benefits of transactional memory are present (e.g. freedom from deadlock), but in addition we describe new modular forms of blocking and choice that have been inaccessible in earlier work.},
affiliation = {Microsoft Research},
pages = {1--13},
year = {2005},
month = {Apr},
date-added = {2010-12-13 19:52:51 +0100},
date-modified = {2010-12-13 19:54:34 +0100},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2005/Harris/2005%20Harris.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p625},
rating = {0}
}

@article{Swierstra:2010p409,
author = {Doaitse Swierstra}, 
title = {A4-ClassesAndInstances},
pages = {1--77},
year = {2010},
month = {Aug},
date-added = {2010-09-05 19:36:45 +0200},
date-modified = {2010-09-05 19:37:58 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/Swierstra/2010%20Swierstra-3.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p409},
read = {Yes},
rating = {0}
}

@article{Loh:2010p398,
author = {Andres L{\"o}h}, 
title = {C03-Monads},
pages = {1--59},
year = {2010},
month = {Aug},
date-added = {2010-09-05 19:36:46 +0200},
date-modified = {2010-09-05 19:40:15 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/L%C3%B6h/2010%20L%C3%B6h-15.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p398},
read = {Yes},
rating = {0}
}

@article{Loh:2010p406,
author = {Andres L{\"o}h}, 
title = {B4-Generic-Programming},
pages = {1--74},
year = {2010},
month = {Aug},
date-added = {2010-09-05 19:36:45 +0200},
date-modified = {2010-09-05 19:39:09 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/L%C3%B6h/2010%20L%C3%B6h-10.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p406},
read = {Yes},
rating = {0}
}

@article{Lammel:2009p562,
author = {Ralf L{\"a}mmel}, 
title = {Scrap Your Boilerplate---Prologically!},
affiliation = {Universita ̈t Koblenz-Landau},
year = {2009},
date-added = {2010-10-24 20:17:45 +0200},
date-modified = {2010-10-24 20:18:14 +0200},
URL = {http://www.uni-koblenz.de/~laemmel/OdeToProlog/paper.pdf},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2009/L%C3%A4mmel/2009%20L%C3%A4mmel.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p562},
rating = {0}
}

@article{Alimarine:2004p588,
author = {Artem Alimarine and Sjaak Smetsers}, 
title = {Fusing Generic Functions},
abstract = {Genericprogrammingisacceptedbythefunctionalprogram- ming community as a valuable tool for program development. Several functional languages have adopted the generic scheme of type-indexed values. This scheme works by specialization of a generic function to a concrete type. However, the generated code is extremely inefficient com- pared to its hand-written counterpart. The performance penalty is so big that the practical usefulness of generic programming is compromised. In this paper we present an optimization algorithm that is able to com- pletely eliminate the overhead introduced by the specialization scheme for a large class of generic functions. The presented technique is based on consumer--producer elimination as exploited by fusion, a standard gen- eral purpose optimization method. We show that our algorithm is able to optimize many practical examples of generic functions.},
affiliation = {University of Nijmegen},
pages = {1--28},
year = {2004},
month = {Aug},
date-added = {2010-11-11 09:10:16 +0100},
date-modified = {2010-11-11 09:11:23 +0100},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2004/Alimarine/2004%20Alimarine.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p588},
rating = {0}
}

@article{Jones:2008p640,
author = {Mark P Jones and Iavor Diatchki}, 
title = {Language and Program Design for Functional Dependencies},
year = {2008},
date-added = {2011-01-14 13:17:54 +0100},
date-modified = {2011-01-14 13:18:19 +0100},
URL = {http://web.cecs.pdx.edu/~mpj/pubs/fundeps-design.pdf},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2008/Jones/2008%20Jones.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p640},
rating = {0}
}

@article{Gibbons:2007p644,
author = {Jeremy Gibbons}, 
journal = {LNCS},
title = {Datatype-Generic Programming},
abstract = {Generic programming aims to increase the flexibility of pro- gramming languages, by expanding the possibilities for parametriza- tion --- ideally, without also expanding the possibilities for uncaught errors. The term means different things to different people: parametric polymorphism, data abstraction, meta-programming, and so on. We use it to mean polytypism, that is, parametrization by the shape of data structures rather than their contents. To avoid confusion with other uses, we have coined the qualified term datatype-generic programming for this purpose. In these lecture notes, we expand on the definition of datatype-generic programming, and present some examples of datatype- generic programs. We also explore the connection with design patterns in object-oriented programming; in particular, we argue that certain design patterns are just higher-order datatype-generic programs.},
affiliation = {Oxford University},
volume = {4719},
year = {2007},
date-added = {2011-01-24 18:21:03 +0100},
date-modified = {2011-01-24 18:22:38 +0100},
URL = {http://www.comlab.ox.ac.uk/jeremy.gibbons/publications/dgp.pdf},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2007/Gibbons/LNCS%202007%20Gibbons.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p644},
rating = {0}
}

@article{Loh:2004p412,
author = {Andres L{\"o}h}, 
title = {Exploring Generic Haskell},
affiliation = {Utrecht University},
year = {2004},
language = {English},
date-added = {2010-09-13 11:39:21 +0200},
date-modified = {2010-09-13 11:41:36 +0200},
URL = {http://people.cs.uu.nl/andres/ExploringGH.pdf},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2004/L%C3%B6h/2004%20L%C3%B6h.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p412},
read = {Yes},
rating = {0}
}

@article{Swierstra:2010p395,
author = {Doaitse Swierstra}, 
title = {C06-Parser-Combinators-Introduction},
pages = {1--90},
year = {2010},
month = {Aug},
date-added = {2010-09-05 19:36:46 +0200},
date-modified = {2010-09-05 19:41:02 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/Swierstra/2010%20Swierstra-5.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p395},
read = {Yes},
rating = {0}
}

@article{Chakravarty:2009p554,
author = {Manuel M T Chakravarty and Gabriel C Ditu and Roman Leshchinskiy}, 
title = {Instant Generics: Fast and Easy},
abstract = {This paper introduces a novel approach to datatype-generic pro- gramming based on type classes and type families. The approach favours simplicity as generic functions are based on Haskell's stan- dard construct for ad-hoc polymorphism, namely type classes --- hence, it integrates well with existing classes and facilitates overrid- ing of generic behaviour with conventional class instances. More- over, our approach is expressive, as we demonstrate by an evalu- ation along the criteria of a set of standard benchmark problems for generic programming in Haskell. Beyond these benchmarks, which only cover type-indexed functions, we fully support type- indexed data types as well as a novel generic view, which we call the structural view. Finally, our approach is designed to lead to highly efficient code with no or little overhead compared to hand- written datatype-specific code. Both, support for type-indexed data types and high performance were crucial in our principal applica- tion: a self-optimising, high-performance array library for data par- allel programming in Haskell.},
year = {2009},
language = {English},
date-added = {2010-10-02 16:48:36 +0200},
date-modified = {2010-10-02 16:49:54 +0200},
URL = {http://www.cse.unsw.edu.au/~chak/papers/instant-generics.pdf},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2009/Chakravarty/2009%20Chakravarty.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p554},
read = {Yes},
rating = {0}
}

@article{Claessen:2000p592,
author = {Koen Claessen and John Hughes}, 
title = {QuickCheck: A Lightweight Tool for Random Testing of Haskell Programs},
affiliation = {Chalmers University of Technology},
pages = {1--12},
year = {2000},
month = {Oct},
date-added = {2010-11-15 15:54:27 +0100},
date-modified = {2010-11-15 16:04:04 +0100},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2000/Claessen/2000%20Claessen.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p592},
read = {Yes},
rating = {0}
}

@article{PeytonJones:2010p597,
author = {Simon Peyton Jones}, 
title = {Tackling the Awkward Squad: Monadic Input/Output, Concurrency, Exceptions, and Foreign-Language Calls in Haskell},
abstract = {Functional programming may be beautiful, but to write real applications we must grapple with awk- ward real-world issues: input/output, robustness, concurrency, and interfacing to programs written in other languages.These lecture notes give an overview of the techniques that have been developed by the Haskell community to address these problems. I introduce various proposed extensions to Haskell along the way, and I offer an operational semantics that explains what these extensions mean.},
affiliation = {Microsoft Research, Cambridge},
pages = {1--46},
year = {2010},
month = {Apr},
date-added = {2010-11-15 15:54:27 +0100},
date-modified = {2010-11-15 16:03:05 +0100},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/Peyton%20Jones/2010%20Peyton%20Jones.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p597},
rating = {0}
}

@article{Swierstra:2010p401,
author = {Doaitse Swierstra}, 
title = {C09-PrologInterpreter},
pages = {1--54},
year = {2010},
month = {Aug},
date-added = {2010-09-05 19:36:46 +0200},
date-modified = {2010-09-05 19:41:36 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/Swierstra/2010%20Swierstra-7.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p401},
read = {Yes},
rating = {0}
}

@article{Bolingbroke:2010p589,
author = {Maximilian Bolingbroke and Simon Peyton Jones}, 
title = {Supercompilation by Evaluation},
abstract = {This paper shows how call-by-need supercompilation can be recast to be based explicitly on an evaluator, contrasting with standard presentations which are specified as algorithms that mix evaluation rules with reductions that are unique to supercompilation. Building on standard operational-semantics technology for call-by-need lan- guages, we show how to extend the supercompilation algorithm to deal with recursive let expressions.},
affiliation = {University of Cambridge, Microsoft Research},
pages = {1--12},
year = {2010},
month = {Jul},
date-added = {2010-11-11 09:12:52 +0100},
date-modified = {2010-11-11 09:13:37 +0100},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/Bolingbroke/2010%20Bolingbroke.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p589},
rating = {0}
}

@article{Wadler:1992p593,
author = {Philip Wadler}, 
title = {Monads for Functional Programming},
abstract = {The use of monads to structure functional programs is de- scribed. Monads provide a convenient framework for simulating effects found in other languages, such as global state, exception handling, out- put, or non-determinism. Three case studies are looked at in detail: how monads ease the modification of a simple evaluator; how monads act as the basis of a datatype of arrays subject to in-place update; and how monads can be used to build parsers.},
affiliation = {University of Glasgow},
pages = {1--31},
year = {1992},
month = {Aug},
date-added = {2010-11-15 15:54:27 +0100},
date-modified = {2010-11-15 16:00:50 +0100},
local-url = {file://localhost/Users/norm2782/Documents/Papers/1992/Wadler/1992%20Wadler.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p593},
rating = {0}
}

@article{Marlow:2006p627,
author = {Simon Marlow}, 
title = {An Extensible Dynamically-Typed Hierarchy of Exceptions},
abstract = {In this paper we address the lack of extensibility of the exception type in Haskell. We propose a lightweight solution involving the use of existential types and the Typeable class only, and show how our solution allows a fully extensible hierarchy of exception types to be declared, in which a single overloaded catch operator can be used to catch either specific exception types, or exceptions belonging to any subclass in the hierarchy. We also show how to combine the existing object-oriented framework OOHaskell with our design, such that OOHaskell objects can be thrown and caught as exceptions, with full support for implicit OOHaskell subtyping in the catch operator.},
affiliation = {Microsoft Research},
pages = {1--11},
year = {2006},
month = {Aug},
date-added = {2010-12-13 19:52:51 +0100},
date-modified = {2010-12-13 19:53:37 +0100},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2006/Marlow/2006%20Marlow.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p627},
rating = {0}
}

@article{Swierstra:2010p410,
author = {Doaitse Swierstra}, 
title = {A2-DataStructures},
pages = {1--133},
year = {2010},
month = {Aug},
date-added = {2010-09-05 19:36:45 +0200},
date-modified = {2010-09-05 19:37:39 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/Swierstra/2010%20Swierstra-1.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p410},
read = {Yes},
rating = {0}
}

@article{Lempsink:2009p551,
author = {Eelco Lempsink and Sean Leather and Andres L{\"o}h}, 
title = {Type-Safe Diff for Families of Datatypes},
abstract = {The UNIX diff program finds the difference between two text files using a classic algorithm for determining the longest common sub- sequence; however, when working with structured input (e.g. pro- gram code), we often want to find the difference between tree-like data (e.g. the abstract syntax tree). In a functional programming language such as Haskell, we can represent this data with a fam- ily of (mutually recursive) datatypes. In this paper, we describe a functional, datatype-generic implementation of diff (and the asso- ciated program patch). Our approach requires advanced type sys- tem features to preserve type safety; therefore, we present the code in Agda, a dependently-typed language well-suited to datatype- generic programming. In order to establish the usefulness of our work, we show that its efficiency can be improved with memoiza- tion and that it can also be defined in Haskell.},
affiliation = {Utrecht University},
pages = {1--12},
year = {2009},
language = {English},
date-added = {2010-09-20 22:58:34 +0200},
date-modified = {2010-09-21 09:31:18 +0200},
URL = {http://people.cs.uu.nl/andres/gdiff-wgp.pdf},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2009/Lempsink/2009%20Lempsink.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p551},
read = {Yes},
rating = {0}
}

@article{Backhouse:1999p645,
author = {Roland Backhouse and Patrik Jansson and Johan Jeuring and Lambert Meertens}, 
journal = {LNCS},
title = {Generic Programming - An Introduction},
pages = {28--115},
volume = {1608},
year = {1999},
month = {Jan},
date-added = {2011-01-24 18:22:54 +0100},
date-modified = {2011-01-24 18:24:25 +0100},
local-url = {file://localhost/Users/norm2782/Documents/Papers/1999/Backhouse/LNCS%201999%20Backhouse.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p645},
rating = {0}
}

@article{Jones:2000p591,
author = {Mark P Jones}, 
title = {Typing Haskell in Haskell∗},
abstract = {Haskell benefits from a sophisticated type system, but implementors, programmers, and researchers suffer because it has no formal description. To remedy this shortcoming, we present a Haskell program that implements a Haskell typechecker, thus providing a math- ematically rigorous specification in a notation that is familiar to Haskell users. We expect this program to fill a serious gap in current descriptions of Haskell, both as a starting point for discussions about existing features of the type system, and as a platform from which to explore new proposals.},
affiliation = {Pacific Software Research Center},
pages = {1--38},
year = {2000},
month = {Nov},
date-added = {2010-11-15 15:54:27 +0100},
date-modified = {2010-11-15 15:55:49 +0100},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2000/Jones/2000%20Jones.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p591},
read = {Yes},
rating = {0}
}

@article{Rodriguez:2008p606,
author = {Alexey Rodriguez and Johan Jeuring and Patrik Jansson and Alex Gerdes and Alex Kiselyov and Bruno C d S Oliveira}, 
title = {Comparing Libraries for Generic Programming in Haskell},
abstract = {Datatype-generic programming is defining functions that depend on the structure, or ``shape'', of datatypes. It has been around for more than 10 years, and a lot of progress has been made, in partic- ular in the lazy functional programming language Haskell. There are more than 10 proposals for generic programming libraries or language extensions for Haskell. To compare and characterize the many generic programming libraries in a typed functional lan- guage, we introduce a set of criteria and develop a generic program- ming benchmark: a set of characteristic examples testing various facets of datatype-generic programming. We have implemented the benchmark for nine existing Haskell generic programming libraries and present the evaluation of the libraries. The comparison is use- ful for reaching a common standard for generic programming, but also for a programmer who has to choose a particular approach for datatype-generic programming.},
affiliation = {Department of Information and Computing Sciences, Utrecht University},
pages = {1--25},
year = {2008},
month = {Apr},
date-added = {2010-12-06 14:11:47 +0100},
date-modified = {2011-01-21 20:52:31 +0100},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2008/Rodriguez/2008%20Rodriguez.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p606},
read = {Yes},
rating = {0}
}

@article{Mitchell:2009p599,
author = {Neil Mitchell}, 
title = {Deriving a Relationship from a Single Example},
abstract = {Given an appropriate domain specific language (DSL), it is possible to describe the relationship between Haskell data types and many generic functions, typically type-class instances. While describing the relationship is possible, it is not always an easy task. There is an alternative -- simply give one example output for a carefully chosen input, and have the relationship derived.When deriving a relationship from only one example, it is im- portant that the derived relationship is the intended one. We identify general restrictions on the DSL, and on the provided example, to ensure a level of predictability. We then apply these restrictions in practice, to derive the relationship between Haskell data types and generic functions. We have used our scheme in the DERIVE tool, where over 60% of type classes are derived from a single example.},
year = {2009},
date-added = {2010-11-28 11:11:55 +0100},
date-modified = {2010-11-28 11:12:44 +0100},
URL = {http://community.haskell.org/~ndm/downloads/paper-deriving_a_relationship_from_a_single_example-04_sep_2009.pdf},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2009/Mitchell/2009%20Mitchell.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p599},
rating = {0}
}

@article{Pucella:2008p626,
author = {Riccardo Pucella and Jesse A Tov}, 
title = {Haskell Session Types with (Almost) No Class},
abstract = {We describe an implementation of session types in Haskell. Session types statically enforce that client-server communication proceeds according to protocols. They have been added to several concurrent calculi, but few implementations of session types are available.Our embedding takes advantage of Haskell where appropriate, but we rely on no exotic features. Thus our approach translates with minimal modification to other polymorphic, typed languages such as ML and Java. Our implementation works with existing Haskell concurrency mechanisms, handles multiple communication chan- nels and recursive session types, and infers protocols automatically.While our implementation uses unsafe operations in Haskell, it does not violate Haskell's safety guarantees. We formalize this claim in a concurrent calculus with unsafe communication primi- tives over which we layer our implementation of session types, and we prove that the session types layer is safe. In particular, it en- forces that channel-based communication follows consistent proto- cols.},
affiliation = {Northeastern University},
pages = {1--12},
year = {2008},
month = {Jul},
date-added = {2010-12-13 19:52:51 +0100},
date-modified = {2010-12-13 19:55:13 +0100},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2008/Pucella/2008%20Pucella.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p626},
rating = {0}
}

@article{Jeuring:2010p413,
author = {Johan Jeuring}, 
title = {Generic Programming in Context},
year = {2010},
date-added = {2010-09-14 16:05:41 +0200},
date-modified = {2010-09-14 16:06:02 +0200},
URL = {http://www.cs.uu.nl/wiki/pub/GP/CourseSchedule/GPInContext.pdf},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/Jeuring/2010%20Jeuring.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p413},
read = {Yes},
rating = {0}
}

@article{Loh:2010p402,
author = {Andres L{\"o}h}, 
title = {B1-Lambda-Calculus},
pages = {1--75},
year = {2010},
month = {Aug},
date-added = {2010-09-05 19:36:45 +0200},
date-modified = {2010-09-05 19:38:14 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/L%C3%B6h/2010%20L%C3%B6h-7.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p402},
read = {Yes},
rating = {0}
}

@article{Magalhaes:2010p555,
author = {Jos{\'e} Pedro Magalhaes}, 
title = {Type Families for Generic Programming and Type-Indexed Datatypes in Haskell},
affiliation = {Utrecht University},
year = {2010},
date-added = {2010-10-03 15:13:10 +0200},
date-modified = {2010-10-03 15:14:05 +0200},
URL = {http://www.cs.uu.nl/wiki/pub/GP/CourseSchedule/TIDsTFs.pdf},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/Magalhaes/2010%20Magalhaes-1.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p555},
read = {Yes},
rating = {0}
}

@article{Loh:2010p391,
author = {Andres L{\"o}h}, 
title = {B2-Typed-Lambda-Calculus},
pages = {1--66},
year = {2010},
month = {Aug},
date-added = {2010-09-05 19:36:45 +0200},
date-modified = {2010-09-05 19:38:21 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/L%C3%B6h/2010%20L%C3%B6h-8.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p391},
read = {Yes},
rating = {0}
}

@article{Loh:2010p404,
author = {Andres L{\"o}h}, 
title = {C10-GADTs},
pages = {1--47},
year = {2010},
month = {Aug},
date-added = {2010-09-05 19:36:46 +0200},
date-modified = {2010-09-05 19:40:04 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/L%C3%B6h/2010%20L%C3%B6h-14.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p404},
read = {Yes},
rating = {0}
}

@article{Lempsink:2009p552,
author = {Eelco Lempsink}, 
title = {Generic Type-safe diff and patch for Families of Datatypes},
pages = {1--82},
year = {2009},
language = {English},
date-added = {2010-09-21 09:31:49 +0200},
date-modified = {2010-09-21 11:48:57 +0200},
URL = {http://eelco.lempsink.nl/thesis.pdf},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2009/Lempsink/2009%20Lempsink-1.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p552},
read = {Yes},
rating = {0}
}

@article{Fokker:2010p639,
author = {Jeroen Fokker and S Doaitse Swierstra}, 
title = {Compiling by Transformation: Efficient Implementation of Overloading in Haskell},
abstract = {The Utrecht Haskell Compiler (UHC) is designed as the composi- tion of many small transformations. We illustrate the transforma- tional approach by showing how overloading is implemented and optimized in UHC. Overloaded functions take additional `dictio- nary' arguments, which are automatically inserted during code gen- eration, based on the inferred types.For each instance declaration, a dictionary is generated containing the functions defined in that instance. The dictionary also contains the default definitions from the corresponding class declaration, thus requiring a mechanism for combining them.When modules are compiled separately, this combining is done dy- namically, during program startup or at the first use of the dictio- nary. When performing whole-program analysis, however, infor- mation from the class and instance declarations can be combined statically using symbolic computation. Further transformations, no- tably specialization of functions for constant arguments, can com- pletely eliminate the run-time overhead normally associated with dictionary passing.},
affiliation = {Utrecht University},
year = {2010},
date-added = {2011-01-14 11:53:39 +0100},
date-modified = {2011-01-14 11:55:05 +0100},
URL = {http://www.cs.uu.nl/wiki/pub/Afp/CourseLiterature/gpce10-SpecConst.pdf},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/Fokker/2010%20Fokker.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p639},
rating = {0}
}

@article{Sheard:2002p643,
author = {Tim Sheard and Simon Peyton Jones}, 
title = {Template Meta-programming for Haskell},
abstract = {We propose a new extension to the purely functional programming language Haskell that supports compile-time meta-programming. The purpose of the system is to support the algorithmic construction of programs at compile-time.The ability to generate code at compile time allows the program- mer to implement such features as polytypic programs, macro-like expansion, user directed optimization (such as inlining), and the generation of supporting data structures and functions from exist- ing data structures and functions.Our design is being implemented in the Glasgow Haskell Compiler, ghc.},
pages = {1--16},
year = {2002},
month = {Nov},
date-added = {2011-01-24 17:41:26 +0100},
date-modified = {2011-01-24 17:44:04 +0100},
URL = {http://research.microsoft.com/en-us/um/people/simonpj/papers/meta-haskell/meta-haskell.pdf},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2002/Sheard/2002%20Sheard-1.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p643},
rating = {0}
}

@article{Hinze:2010p595,
author = {Ralf Hinze and Ross Paterson}, 
title = {Finger Trees: A Simple General-purpose Data Structure},
abstract = {We introduce 2-3 finger trees, a functional representation of persistent sequences support- ing access to the ends in amortized constant time, and concatenation and splitting in time logarithmic in the size of the smaller piece. Representations achieving these bounds have appeared previously, but 2-3 finger trees are much simpler, as are the operations on them. Further, by defining the split operation in a general form, we obtain a general purpose data structure that can serve as a sequence, priority queue, search tree, priority search queue and more.},
affiliation = {Universit{\"a}t Bonn, City University},
pages = {1--21},
year = {2010},
month = {Nov},
date-added = {2010-11-15 15:54:27 +0100},
date-modified = {2010-11-15 16:01:43 +0100},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/Hinze/2010%20Hinze.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p595},
rating = {0}
}

@article{Coutts:2007p596,
author = {Duncan Coutts and Don Stewart and Roman Leshchinskiy}, 
title = {Rewriting Haskell Strings},
abstract = {The Haskell String type is notoriously inefficient. We intro- duce a new data type, ByteString, based on lazy lists of byte arrays, com- bining the speed benefits of strict arrays with lazy evaluation. Equational transformations based on term rewriting are used to deforest interme- diate ByteStrings automatically. We describe novel fusion combinators with improved expressiveness and performance over previous functional array fusion strategies. A library for ByteStrings is implemented, provid- ing a purely functional interface, which approaches the speed of low-level mutable arrays in C.},
pages = {1--15},
year = {2007},
month = {Oct},
date-added = {2010-11-15 15:54:27 +0100},
date-modified = {2010-11-15 16:05:28 +0100},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2007/Coutts/2007%20Coutts.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p596},
rating = {0}
}

@article{Swierstra:2008p374,
author = {S Doaitse Swierstra}, 
title = {Combinator Parsing: A Short Tutorial},
affiliation = {institute of information and computing sciences, utrecht university},
year = {2008},
date-added = {2010-09-04 17:35:39 +0200},
date-modified = {2010-09-04 17:36:33 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2008/Swierstra/2008%20Swierstra.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p374},
read = {Yes},
rating = {0}
}

@article{Loh:2010p397,
author = {Andres L{\"o}h}, 
title = {C05-Lazy-Evaluation-and-Profiling},
pages = {1--46},
year = {2010},
month = {Aug},
date-added = {2010-09-05 19:36:46 +0200},
date-modified = {2010-09-05 19:40:34 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/L%C3%B6h/2010%20L%C3%B6h-17.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p397},
read = {Yes},
rating = {0}
}

